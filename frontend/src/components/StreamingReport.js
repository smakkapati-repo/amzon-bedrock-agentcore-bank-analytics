/**
 * Enhanced Streaming Report Component with AgentCore integration
 */
import React, { useState, useEffect } from 'react';\nimport { Box, Typography, Card, CardContent, Button, LinearProgress, Alert } from '@mui/material';\nimport AgentService from '../services/AgentService';\n\nconst StreamingReport = ({ bankName, mode = 'rag', onComplete }) => {\n  const [reportContent, setReportContent] = useState('');\n  const [progress, setProgress] = useState(0);\n  const [status, setStatus] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [error, setError] = useState('');\n  const [sourcesUsed, setSourcesUsed] = useState(0);\n  const [connectionMethod, setConnectionMethod] = useState('');\n\n  useEffect(() => {\n    // Listen for streaming events\n    AgentService.on('report_start', (data) => {\n      setIsGenerating(true);\n      setStatus(`Starting report generation for ${data.bank_name}...`);\n      setProgress(10);\n    });\n\n    AgentService.on('report_chunk', (data) => {\n      if (data.data.chunk) {\n        setReportContent(prev => prev + data.data.chunk);\n      }\n      if (data.data.status) {\n        setStatus(data.data.status);\n      }\n      if (data.data.progress) {\n        setProgress(data.data.progress);\n      }\n      if (data.data.complete) {\n        setIsGenerating(false);\n        setStatus('Report generation completed!');\n        setProgress(100);\n        if (data.data.sources_used) {\n          setSourcesUsed(data.data.sources_used);\n        }\n        if (onComplete) {\n          onComplete(reportContent);\n        }\n      }\n    });\n\n    AgentService.on('report_complete', () => {\n      setIsGenerating(false);\n      setStatus('Report generation completed!');\n      setProgress(100);\n    });\n\n    AgentService.on('error', (data) => {\n      setError(data.message);\n      setIsGenerating(false);\n      setStatus('Error occurred during generation');\n    });\n\n    return () => {\n      // Cleanup listeners\n      AgentService.off('report_start');\n      AgentService.off('report_chunk');\n      AgentService.off('report_complete');\n      AgentService.off('error');\n    };\n  }, [reportContent, onComplete]);\n\n  const startGeneration = async () => {\n    try {\n      setError('');\n      setReportContent('');\n      setProgress(0);\n      setStatus('Initializing...');\n      setIsGenerating(true);\n\n      const result = await AgentService.generateReport(bankName, mode);\n      \n      if (result.streaming) {\n        setConnectionMethod(result.method);\n        setStatus(`Connected via ${result.method.toUpperCase()}`);\n      } else {\n        // Handle non-streaming response\n        setReportContent(result.report || 'Report generation failed');\n        setIsGenerating(false);\n        setProgress(100);\n      }\n    } catch (err) {\n      setError(`Failed to start report generation: ${err.message}`);\n      setIsGenerating(false);\n      setStatus('Generation failed');\n    }\n  };\n\n  const stopGeneration = () => {\n    setIsGenerating(false);\n    setStatus('Generation stopped by user');\n    AgentService.disconnect();\n  };\n\n  return (\n    <Box>\n      {/* Control Panel */}\n      <Card sx={{ mb: 3 }}>\n        <CardContent>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h6\">\n              ðŸ¤– AgentCore Report Generator\n            </Typography>\n            <Box sx={{ display: 'flex', gap: 1 }}>\n              {!isGenerating ? (\n                <Button \n                  variant=\"contained\" \n                  onClick={startGeneration}\n                  disabled={!bankName}\n                >\n                  Generate Report\n                </Button>\n              ) : (\n                <Button \n                  variant=\"outlined\" \n                  color=\"error\"\n                  onClick={stopGeneration}\n                >\n                  Stop Generation\n                </Button>\n              )}\n            </Box>\n          </Box>\n\n          {/* Progress Bar */}\n          {isGenerating && (\n            <Box sx={{ mb: 2 }}>\n              <LinearProgress \n                variant=\"determinate\" \n                value={progress} \n                sx={{ height: 8, borderRadius: 4 }}\n              />\n              <Typography variant=\"body2\" sx={{ mt: 1, color: 'text.secondary' }}>\n                {status} ({progress}%)\n                {connectionMethod && ` â€¢ Connected via ${connectionMethod.toUpperCase()}`}\n              </Typography>\n            </Box>\n          )}\n\n          {/* Error Display */}\n          {error && (\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\n              {error}\n            </Alert>\n          )}\n\n          {/* Generation Info */}\n          {(sourcesUsed > 0 || connectionMethod) && (\n            <Box sx={{ display: 'flex', gap: 2, fontSize: '0.875rem', color: 'text.secondary' }}>\n              {sourcesUsed > 0 && (\n                <span>ðŸ“„ {sourcesUsed} sources analyzed</span>\n              )}\n              {connectionMethod && (\n                <span>ðŸ”— {connectionMethod.toUpperCase()} streaming</span>\n              )}\n            </Box>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Report Content */}\n      {reportContent && (\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              ðŸ“Š Financial Analysis Report - {bankName}\n            </Typography>\n            <Box sx={{ \n              whiteSpace: 'pre-wrap', \n              fontFamily: 'monospace',\n              fontSize: '0.9rem',\n              lineHeight: 1.6,\n              maxHeight: '600px',\n              overflow: 'auto',\n              border: '1px solid #e0e0e0',\n              borderRadius: 1,\n              p: 2,\n              backgroundColor: '#fafafa'\n            }}>\n              {reportContent}\n              {isGenerating && (\n                <Box component=\"span\" sx={{ \n                  animation: 'blink 1s infinite',\n                  '@keyframes blink': {\n                    '0%, 50%': { opacity: 1 },\n                    '51%, 100%': { opacity: 0 }\n                  }\n                }}>\n                  â–Š\n                </Box>\n              )}\n            </Box>\n          </CardContent>\n        </Card>\n      )}\n    </Box>\n  );\n};\n\nexport default StreamingReport;