AWSTemplateFormatVersion: '2010-09-09'
Description: 'BankIQ+ Backend - ECS Fargate + ALB (Phase 3)'

Parameters:
  ProjectName:
    Type: String
    Default: bankiq
    Description: Project name for resource naming
  
  Environment:
    Type: String
    Default: prod
    Description: Environment name (dev, staging, prod)
  
  PrerequisitesStackName:
    Type: String
    Default: bankiq-prerequisites
    Description: Name of the prerequisites stack
  
  AgentArn:
    Type: String
    Description: AgentCore agent ARN
  
  VpcId:
    Type: String
    Description: VPC ID for ECS and ALB (from prerequisites stack)
  
  SubnetIds:
    Type: CommaDelimitedList
    Description: Subnet IDs for ECS tasks and ALB (from prerequisites stack)
  
  BackendImageTag:
    Type: String
    Default: latest
    Description: Docker image tag for backend

Resources:
  # ============================================================================
  # SECURITY GROUPS
  # ============================================================================
  
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-alb-sg'
      GroupDescription: Security group for ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP from anywhere
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS from anywhere
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-alb-sg'

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-ecs-sg'
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3001
          ToPort: 3001
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Allow traffic from ALB
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-ecs-sg'

  # ============================================================================
  # APPLICATION LOAD BALANCER
  # ============================================================================
  
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${ProjectName}-alb'
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '300'  # 5 minutes for long-running AI queries
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-alb'

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-tg'
      Port: 3001
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  # ============================================================================
  # ECS CLUSTER
  # ============================================================================
  
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${ProjectName}-cluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # ============================================================================
  # CLOUDWATCH LOG GROUP
  # ============================================================================
  
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${ProjectName}-backend'
      RetentionInDays: 7

  # ============================================================================
  # ECS TASK DEFINITION
  # ============================================================================
  
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ProjectName}-backend'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '512'
      Memory: '1024'
      ExecutionRoleArn:
        Fn::ImportValue: !Sub '${PrerequisitesStackName}-ECSTaskExecutionRoleArn'
      TaskRoleArn:
        Fn::ImportValue: !Sub '${PrerequisitesStackName}-ECSTaskRoleArn'
      ContainerDefinitions:
        - Name: backend
          Image: !Sub
            - '${ECRUri}:${ImageTag}'
            - ECRUri:
                Fn::ImportValue: !Sub '${PrerequisitesStackName}-BackendECRUri'
              ImageTag: !Ref BackendImageTag
          Essential: true
          PortMappings:
            - ContainerPort: 3001
              Protocol: tcp
          Environment:
            - Name: PORT
              Value: '3001'
            - Name: REGION
              Value: !Ref AWS::Region
            - Name: AGENTCORE_AGENT_ARN
              Value: !Ref AgentArn
            - Name: UPLOADED_DOCS_BUCKET
              Value:
                Fn::ImportValue: !Sub '${PrerequisitesStackName}-UploadedDocsBucket'
            - Name: AUTH_ENABLED
              Value: 'true'
            - Name: COGNITO_REGION
              Value: !Ref AWS::Region
            - Name: COGNITO_USER_POOL_ID
              Value:
                Fn::ImportValue: bankiq-auth-UserPoolId
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: backend
          HealthCheck:
            Command:
              - CMD-SHELL
              - wget --no-verbose --tries=1 --spider http://localhost:3001/health || exit 1
            Interval: 30
            Timeout: 10
            Retries: 5
            StartPeriod: 120

  # ============================================================================
  # ECS SERVICE
  # ============================================================================
  
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub '${ProjectName}-backend-service'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref SubnetIds
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 3001
          TargetGroupArn: !Ref ALBTargetGroup
      HealthCheckGracePeriodSeconds: 180
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true

Outputs:
  StackName:
    Description: Stack name for cross-stack references
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub '${AWS::StackName}-StackName'
  
  ALBDnsName:
    Description: ALB DNS name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-ALBDnsName'
  
  ALBUrl:
    Description: Backend API URL
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-BackendUrl'
  
  ECSClusterName:
    Description: ECS cluster name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'
  
  ECSServiceName:
    Description: ECS service name
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub '${AWS::StackName}-ServiceName'
